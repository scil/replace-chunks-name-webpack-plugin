{"version":3,"file":"index.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,4BC4ClF,QA1CA,WAII,WAAYI,GACR,GAJI,KAAAC,cAAgC,GAChC,KAAAC,QAAsB,EAGtBF,EAAQG,WAAaC,MAAMC,QAAQL,EAAQG,UAC3C,MAAM,IAAIG,MAAM,qCAEpB,GACIN,EAAQG,WACPH,EAAQG,SAASI,OAAM,SAACC,GAEtB,OADCA,EAAKC,OAASD,EAAKC,QAAU,KACvBD,EAAKE,SAAWF,EAAKG,WAC/B,IAEA,MAAM,IAAIL,MAAM,+DAEpBM,KAAKX,cAAgBD,EAAQG,SAC7BS,KAAKV,OAASF,EAAQE,MAC1B,CAqBJ,OAlBI,YAAAW,MAAA,SAAMC,GAAN,WACIA,EAASC,MAAMC,YAAYC,IAAI,qBAAqB,SAACD,GACjDA,EAAYD,MAAMG,UAAUD,IACxB,qBACA,WACQ,EAAKf,QAELc,EAAYG,OAAOC,SAAQ,SAACZ,GAExB,EAAKP,cAAcmB,SAAQ,SAAC,G,IAACX,EAAM,SAACC,EAAO,UAACC,EAAW,cACnDH,EAAKC,GAAUD,EAAKC,GAAQY,QAAQX,EAAQC,EAChD,GACJ,GAER,GAER,GACJ,EACJ,EAxCA,G","sources":["webpack://replace-chunks-name-webpack-plugin/webpack/bootstrap","webpack://replace-chunks-name-webpack-plugin/webpack/runtime/define property getters","webpack://replace-chunks-name-webpack-plugin/webpack/runtime/hasOwnProperty shorthand","webpack://replace-chunks-name-webpack-plugin/./src/webpack-replace-chunks-name-plugin.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import {OptionsProps, replaceProps, enableProps} from '../types';\n\nclass WebpackReplaceChunksNamePlugin {\n    private replaceChunks: replaceProps[] = [];\n    private enable: enableProps = true;\n\n    constructor(options: OptionsProps) {\n        if (options.replaces && !Array.isArray(options.replaces)) {\n            throw new Error('options.replaces must be an array');\n        }\n        if (\n            options.replaces &&\n            !options.replaces.every((item) => {\n                item.target = item.target || 'id'\n               return item.pattern && item.replacement\n            })\n        ) {\n            throw new Error('members must contain {pattern: string, replacement: string}');\n        }\n        this.replaceChunks = options.replaces;\n        this.enable = options.enable;\n    }\n\n\n    apply(compiler) {\n        compiler.hooks.compilation.tap('replaceChunksName', (compilation) => {\n            compilation.hooks.afterHash.tap(\n                'replaceChunksName',\n                () => {\n                    if (this.enable) {\n                        // console.log('try to replace chunk file name');\n                        compilation.chunks.forEach((item) => {\n                            // console.log(item.id,item.name);\n                            this.replaceChunks.forEach(({target,pattern,replacement} )=> {\n                                item[target] = item[target].replace(pattern,replacement)\n                            })\n                        });\n                    }\n                },\n            );\n        });\n    }\n}\n\nexport default WebpackReplaceChunksNamePlugin;\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","options","replaceChunks","enable","replaces","Array","isArray","Error","every","item","target","pattern","replacement","this","apply","compiler","hooks","compilation","tap","afterHash","chunks","forEach","replace"],"sourceRoot":""}